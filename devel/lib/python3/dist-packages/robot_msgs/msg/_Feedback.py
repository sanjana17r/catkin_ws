# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_msgs/Feedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Feedback(genpy.Message):
  _md5sum = "6b9cc2eee073431257f7e3ebf5ad3466"
  _type = "robot_msgs/Feedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#mission status
int32 IDLE =0
int32 ACTIVE =1
int32 SUCCESS =2
int32 ABORTED =3
int32 PAUSED =4


string index
string mission_id
int16 number
int16 status
float32 completion_percentage
int32 time_elapsed
int32 priority_level
"""
  # Pseudo-constants
  IDLE = 0
  ACTIVE = 1
  SUCCESS = 2
  ABORTED = 3
  PAUSED = 4

  __slots__ = ['index','mission_id','number','status','completion_percentage','time_elapsed','priority_level']
  _slot_types = ['string','string','int16','int16','float32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       index,mission_id,number,status,completion_percentage,time_elapsed,priority_level

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Feedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.index is None:
        self.index = ''
      if self.mission_id is None:
        self.mission_id = ''
      if self.number is None:
        self.number = 0
      if self.status is None:
        self.status = 0
      if self.completion_percentage is None:
        self.completion_percentage = 0.
      if self.time_elapsed is None:
        self.time_elapsed = 0
      if self.priority_level is None:
        self.priority_level = 0
    else:
      self.index = ''
      self.mission_id = ''
      self.number = 0
      self.status = 0
      self.completion_percentage = 0.
      self.time_elapsed = 0
      self.priority_level = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.mission_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2hf2i().pack(_x.number, _x.status, _x.completion_percentage, _x.time_elapsed, _x.priority_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.index = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.index = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mission_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.number, _x.status, _x.completion_percentage, _x.time_elapsed, _x.priority_level,) = _get_struct_2hf2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.index
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.mission_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2hf2i().pack(_x.number, _x.status, _x.completion_percentage, _x.time_elapsed, _x.priority_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.index = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.index = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mission_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mission_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.number, _x.status, _x.completion_percentage, _x.time_elapsed, _x.priority_level,) = _get_struct_2hf2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2hf2i = None
def _get_struct_2hf2i():
    global _struct_2hf2i
    if _struct_2hf2i is None:
        _struct_2hf2i = struct.Struct("<2hf2i")
    return _struct_2hf2i
