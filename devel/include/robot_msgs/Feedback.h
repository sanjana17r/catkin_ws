// Generated by gencpp from file robot_msgs/Feedback.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_FEEDBACK_H
#define ROBOT_MSGS_MESSAGE_FEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct Feedback_
{
  typedef Feedback_<ContainerAllocator> Type;

  Feedback_()
    : index()
    , mission_id()
    , number(0)
    , status(0)
    , completion_percentage(0.0)
    , time_elapsed(0)
    , priority_level(0)  {
    }
  Feedback_(const ContainerAllocator& _alloc)
    : index(_alloc)
    , mission_id(_alloc)
    , number(0)
    , status(0)
    , completion_percentage(0.0)
    , time_elapsed(0)
    , priority_level(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _index_type;
  _index_type index;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mission_id_type;
  _mission_id_type mission_id;

   typedef int16_t _number_type;
  _number_type number;

   typedef int16_t _status_type;
  _status_type status;

   typedef float _completion_percentage_type;
  _completion_percentage_type completion_percentage;

   typedef int32_t _time_elapsed_type;
  _time_elapsed_type time_elapsed;

   typedef int32_t _priority_level_type;
  _priority_level_type priority_level;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IDLE)
  #undef IDLE
#endif
#if defined(_WIN32) && defined(ACTIVE)
  #undef ACTIVE
#endif
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(ABORTED)
  #undef ABORTED
#endif
#if defined(_WIN32) && defined(PAUSED)
  #undef PAUSED
#endif

  enum {
    IDLE = 0,
    ACTIVE = 1,
    SUCCESS = 2,
    ABORTED = 3,
    PAUSED = 4,
  };


  typedef boost::shared_ptr< ::robot_msgs::Feedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::Feedback_<ContainerAllocator> const> ConstPtr;

}; // struct Feedback_

typedef ::robot_msgs::Feedback_<std::allocator<void> > Feedback;

typedef boost::shared_ptr< ::robot_msgs::Feedback > FeedbackPtr;
typedef boost::shared_ptr< ::robot_msgs::Feedback const> FeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::Feedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::Feedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::Feedback_<ContainerAllocator1> & lhs, const ::robot_msgs::Feedback_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.mission_id == rhs.mission_id &&
    lhs.number == rhs.number &&
    lhs.status == rhs.status &&
    lhs.completion_percentage == rhs.completion_percentage &&
    lhs.time_elapsed == rhs.time_elapsed &&
    lhs.priority_level == rhs.priority_level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::Feedback_<ContainerAllocator1> & lhs, const ::robot_msgs::Feedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::Feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::Feedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::Feedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b9cc2eee073431257f7e3ebf5ad3466";
  }

  static const char* value(const ::robot_msgs::Feedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b9cc2eee0734312ULL;
  static const uint64_t static_value2 = 0x57f7e3ebf5ad3466ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/Feedback";
  }

  static const char* value(const ::robot_msgs::Feedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#mission status\n"
"int32 IDLE =0\n"
"int32 ACTIVE =1\n"
"int32 SUCCESS =2\n"
"int32 ABORTED =3\n"
"int32 PAUSED =4\n"
"\n"
"\n"
"string index\n"
"string mission_id\n"
"int16 number\n"
"int16 status\n"
"float32 completion_percentage\n"
"int32 time_elapsed\n"
"int32 priority_level\n"
;
  }

  static const char* value(const ::robot_msgs::Feedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::Feedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.mission_id);
      stream.next(m.number);
      stream.next(m.status);
      stream.next(m.completion_percentage);
      stream.next(m.time_elapsed);
      stream.next(m.priority_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Feedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::Feedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::Feedback_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.index);
    s << indent << "mission_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mission_id);
    s << indent << "number: ";
    Printer<int16_t>::stream(s, indent + "  ", v.number);
    s << indent << "status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.status);
    s << indent << "completion_percentage: ";
    Printer<float>::stream(s, indent + "  ", v.completion_percentage);
    s << indent << "time_elapsed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.time_elapsed);
    s << indent << "priority_level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.priority_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_FEEDBACK_H
